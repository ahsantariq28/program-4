#include <sys/wait.h>
#include <sys/types.h>
#include <sys/msg.h>
#include <sys/ipc.h>
#define TRUE 1
#define FALSE 0
#define BLOCKING 0 // blocking send/receive, msgflg value
#define MYPORT 12345 // unique value to create key
#define FIRST_MSG 0 // receive first message in queue
#define DATA_T 1 // type code for a data message
#define PERMS 0644 // access permission
#define MSG_SIZE 100 // max. size of message
int ret_code;
// the message buffer record
typedef struct msgbuffer{
long mtype; // message type (must be > 0)
char the_message[MSG_SIZE]; // the message
}Message, *Messageptr;
// message queue parameters
key_t myKey; // unique key
int queueId; // message queue identifier
int flags;
size_t msgsize = sizeof(Message);
int main(int argc, char *argv[]){
Messageptr message1;
char msg[MSG_SIZE];
char *msgptr;
// create an IPC key for our message queue
myKey = ftok(".", MYPORT);
// create the message queue
// IPC_CREAT - create a queue with the given key
// if it does not already exist.
// IPC_EXCL - return error if queue with the given
// key already exists.
// PERMS - specify permissions for queue.
flags = IPC_CREAT | IPC_EXCL | PERMS;
queueId = msgget(myKey, flags);
// get a message from the user
msgptr = fgets(msg, MSG_SIZE, stdin);
// fork a new process
if(fork()){
// Parent: send a message to the queue
message1 = (Messageptr)malloc(msgsize);
message1->mtype = DATA_T;
strncpy(message1->the_message, msgptr, MSG_SIZE-1);
ret_code = msgsnd(queueId, message1, msgsize, BLOCKING);
printf("Message sent\n");
sleep(2); // sleep before parent cleans up the message queue
}
else{ // Child: read message from queue
sleep(1);
printf("Inside child process\n");
message1 = (Messageptr)malloc(msgsize);
msgrcv(queueId, message1, msgsize,
FIRST_MSG, BLOCKING);
printf("Child process read message type %d %s",
message1->mtype, message1->the_message);
exit(0);
}
// close the message queue
msgctl(queueId, IPC_RMID, NULL);
return 0;
} /* end main */
class DateServer(object):
    @staticmethod
    def main(args):
        try:
            sock = ServerSocket(6013)
            # now listen for connections
           #Convert by M.Ahsan Tariq
            while True:
                client = sock.accept()
                pout = PrintWriter(client.getOutputStream(), True)
                # write the Date to the socket
                pout.println(str((datetime.datetime.now())))
                # close the socket and resume listening for more connections
                client.close()
        except IOException as ioe:
            System.err.println(ioe)
class DateClient(object):
    @staticmethod
    def main(args):
        try:
            # this could be changed to an IP name or address other than the localhost
           #Convert By M.Ahsan Tariq
            sock = Socket("127.0.0.1",6013)
            in_keyword_conflict = sock.getInputStream()
            bin = BufferedReader(InputStreamReader(in_keyword_conflict))
            line = None
#JAVA TO PYTHON CONVERTER TODO TASK: The following assignments within expression was not converted by Java to Python Converter:
#ORIGINAL LINE: while((line = bin.readLine()) != null)
            while (line = bin.readLine()) is not None:
                print(line)
            sock.close()
        except IOException as ioe:
            System.err.println(ioe)
